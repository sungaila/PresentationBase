# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

jobs:
- job: Build
  displayName: 'Build'
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      arguments: '-c $(buildConfiguration) -p:VersionSuffix=ci'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish project assemblies'
    inputs:
      targetPath: '$(Build.SourcesDirectory)\NetCore\bin\$(buildConfiguration)'
      artifact: 'Assemblies ($(buildConfiguration))'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish test assemblies'
    inputs:
      targetPath: '$(Build.SourcesDirectory)\NetCore.Tests\bin\$(buildConfiguration)'
      artifact: 'Tests'
      publishLocation: 'pipeline'
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet package'
    inputs:
      command: 'pack'
      arguments: '-c $(buildConfiguration)'
      packagesToPack: '$(Build.SourcesDirectory)\NetCore\NetCore.csproj'
      nobuild: true
      versioningScheme: 'off'
      buildProperties: 'VersionSuffix=ci'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish NuGet package'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'NuGet package ($(buildConfiguration))'
      publishLocation: 'pipeline'
  
- job: Test
  displayName: 'Test'
  dependsOn: Build
  steps:
  - checkout: none
    displayName: 'Skip checkout'
  - task: DownloadPipelineArtifact@2
    displayName: 'Download test assemblies'
    inputs:
      buildType: 'current'
      artifactName: 'Tests'
      targetPath: '$(Pipeline.Workspace)'
  - task: VSTest@2
    displayName: '.NET Framework 4.6.1'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: '$(Pipeline.Workspace)\**\net461\PresentationBase.Tests.dll'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runTestsInIsolation: true
      codeCoverageEnabled: true
      testRunTitle: '.NET Framework 4.6.1'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  - task: VSTest@2
    displayName: '.NET Framework 4.8'
    condition: succeededOrFailed()
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: '$(Pipeline.Workspace)\**\net48\PresentationBase.Tests.dll'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runTestsInIsolation: true
      codeCoverageEnabled: true
      testRunTitle: '.NET Framework 4.8'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: '.NET Core 3.1'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      arguments: '$(Pipeline.Workspace)\**\netcoreapp3.1\PresentationBase.Tests.dll'
      testRunTitle: '.NET Core 3.1 ($(agent.os))'
  - task: DotNetCoreCLI@2
    displayName: '.NET 5.0'
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      arguments: '$(Pipeline.Workspace)\**\net5.0-windows\PresentationBase.Tests.dll'
      testRunTitle: '.NET 5.0 ($(agent.os))'